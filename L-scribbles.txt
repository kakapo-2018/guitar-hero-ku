get everything in class by string and call in reverse order manually. Or reverse each fret. whatever's easier

add tempo playback noteInWords

if state=b, find all with class flat and re-render inner html with Gb, etc


 ------------------------- THINKING  -------------------------
given arr CEG
search fretsequence for tonic/ [0], then find all following? ugh.

if scinote letter IS one of arr && scinote num = tonic number or higher, then return

* get sci numbers with a lgnth-1 thing at first determiation of scinote
* best use "Csharp4" and get length-1, OR "C4sharp" and get second character

* move this out of this component and into...?
* make chordtype default to major, put in redux initialState
* change "#" to "sharp" & etc at first chance

can this be done w/o scinotes? only using them to cancel doubles at the end. can if the fret sequence can filter just by note type

search for frets where scinote matches letter AND numeral is same or higher
?? CAREFUL of cases where chord notes get mixup around C3

getChordNotes --- use Tonal, return arr of strings
buildChord --- switch into maj, min, etc. tonic + thirds, etc. does Tonal have something for this?
findTonicSciNote(tonic) ---= "C4"


- - - - return generic or sci notes
getChordKey --- from redux state ... wait this is by default the tonic, right? so findTonic needs to find the SCINOTE
findTonic --- use chordNote[0] --= "C". can Use result of FretList. return scinote. Put in reducer w/action

- - - - returns divs
limitFrets --- by max fret
limitString --- one per string (where best to use?)
createFretList --- create sequential list. Find string6 fret3, then string6 then fret 2, ... string 5 fret 3... &etc. use limitFrets. Use nested for loops. Return IDs OR divs w/attributes


 


 
-------------------- get div details --------------------
frets[i].attributes.note       // note without sci
frets[i].attributes.scinote      //note with sci
frets[i].attributes.scinote     textContent) // as string

frets[i].attributes.id.value  // ID strin
frets[i].classList.value)      //gets all classes as a string with spaces

frets[i].attributes.class     
frets[i].attributes.string       //name of string
frets[i].attributes.fret       //name of fret
frets[i].attributes.string       // all classes

frets[i].attributes.fret.value
frets[i].attributes.id.value
frets[i].attributes.scinote.textContent



// ------------------ OLD but working functionality for single sharps
// //for sharps
//     if (incoming.includes("#")) {
//       // change "#" to "sharp" to match class name
//       let arr = incoming.split("#")
//       arr.push("sharp")
//       let noteInWords = arr.join("")

//       // get all divs with that class and add lit class
//       let notesByClass = document.getElementsByClassName(noteInWords)
//       for (let i = 0; i < notesByClass.length; i++) {
//         notesByClass[i].classList.add("lit")
//       }
//     }
//     else {
//       let notesByClass = document.getElementsByClassName(incoming)
//       for (let i = 0; i < notesByClass.length; i++) {
//         notesByClass[i].classList.add("lit")
//       }
//     }
// // DOESN'T WORK FOR DOUBLE SHARPS. SIGH






// // ---------------------------- IN PROGRESS --------------------

//   // let testnote = "C4" // change to be incoming note. Need to split between scinote and normal notes
//   let list = []
//   let frets = document.getElementsByClassName("fret")

//     for (let i = 0; i < frets.length; i++) {
//       if (frets[i].attributes.scinote.textContent === testnote) {
//         console.log(frets[i].attributes.id.value)
//         // console.log(frets[i].attributes.scinote.textContent)
//         this.lightUpNote(frets[i].attributes.id.value)
//       }


//     }
//   console.log(list)
